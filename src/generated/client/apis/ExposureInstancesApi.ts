/* tslint:disable */
/* eslint-disable */
/**
 * Megasense data portal API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ExposureInstance,
    ExposureInstanceFromJSON,
    ExposureInstanceToJSON,
} from '../models';

export interface CreateExposureInstanceRequest {
    exposureInstance: ExposureInstance;
}

export interface DeleteExposureInstanceRequest {
    exposureInstanceId: string;
}

export interface FindExposureInstanceRequest {
    exposureInstanceId: string;
}

export interface ListExposureInstancesRequest {
    createdBefore?: Date;
    createdAfter?: Date;
}

/**
 * no description
 */
export class ExposureInstancesApi extends runtime.BaseAPI {

    /**
     * Creates an exposure instance
     */
    async createExposureInstanceRaw(requestParameters: CreateExposureInstanceRequest): Promise<runtime.ApiResponse<ExposureInstance>> {
        if (requestParameters.exposureInstance === null || requestParameters.exposureInstance === undefined) {
            throw new runtime.RequiredError('exposureInstance','Required parameter requestParameters.exposureInstance was null or undefined when calling createExposureInstance.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/exposureInstances`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ExposureInstanceToJSON(requestParameters.exposureInstance),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ExposureInstanceFromJSON(jsonValue));
    }

    /**
     * Creates an exposure instance
     */
    async createExposureInstance(requestParameters: CreateExposureInstanceRequest): Promise<ExposureInstance> {
        const response = await this.createExposureInstanceRaw(requestParameters);
        return await response.value();
    }

    /**
     * Deletes an exposure instance
     */
    async deleteExposureInstanceRaw(requestParameters: DeleteExposureInstanceRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.exposureInstanceId === null || requestParameters.exposureInstanceId === undefined) {
            throw new runtime.RequiredError('exposureInstanceId','Required parameter requestParameters.exposureInstanceId was null or undefined when calling deleteExposureInstance.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/exposureInstances/{exposureInstanceId}`.replace(`{${"exposureInstanceId"}}`, encodeURIComponent(String(requestParameters.exposureInstanceId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes an exposure instance
     */
    async deleteExposureInstance(requestParameters: DeleteExposureInstanceRequest): Promise<void> {
        await this.deleteExposureInstanceRaw(requestParameters);
    }

    /**
     * Finds an exposure instance
     */
    async findExposureInstanceRaw(requestParameters: FindExposureInstanceRequest): Promise<runtime.ApiResponse<ExposureInstance>> {
        if (requestParameters.exposureInstanceId === null || requestParameters.exposureInstanceId === undefined) {
            throw new runtime.RequiredError('exposureInstanceId','Required parameter requestParameters.exposureInstanceId was null or undefined when calling findExposureInstance.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/exposureInstances/{exposureInstanceId}`.replace(`{${"exposureInstanceId"}}`, encodeURIComponent(String(requestParameters.exposureInstanceId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ExposureInstanceFromJSON(jsonValue));
    }

    /**
     * Finds an exposure instance
     */
    async findExposureInstance(requestParameters: FindExposureInstanceRequest): Promise<ExposureInstance> {
        const response = await this.findExposureInstanceRaw(requestParameters);
        return await response.value();
    }

    /**
     * Lists exposure instances
     */
    async listExposureInstancesRaw(requestParameters: ListExposureInstancesRequest): Promise<runtime.ApiResponse<Array<ExposureInstance>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.createdBefore !== undefined) {
            queryParameters['createdBefore'] = (requestParameters.createdBefore as any).toISOString();
        }

        if (requestParameters.createdAfter !== undefined) {
            queryParameters['createdAfter'] = (requestParameters.createdAfter as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/exposureInstances`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ExposureInstanceFromJSON));
    }

    /**
     * Lists exposure instances
     */
    async listExposureInstances(requestParameters: ListExposureInstancesRequest): Promise<Array<ExposureInstance>> {
        const response = await this.listExposureInstancesRaw(requestParameters);
        return await response.value();
    }

}
