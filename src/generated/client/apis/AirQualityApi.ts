/* tslint:disable */
/* eslint-disable */
/**
 * Megasense data portal API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AirQuality,
    AirQualityFromJSON,
    AirQualityToJSON,
} from '../models';

export interface GetAirQualityRequest {
    pollutant: string;
    precision: number;
    boundingBoxCorner1: string;
    boundingBoxCorner2: string;
}

/**
 * no description
 */
export class AirQualityApi extends runtime.BaseAPI {

    /**
     * Get air quality data
     */
    async getAirQualityRaw(requestParameters: GetAirQualityRequest): Promise<runtime.ApiResponse<Array<AirQuality>>> {
        if (requestParameters.pollutant === null || requestParameters.pollutant === undefined) {
            throw new runtime.RequiredError('pollutant','Required parameter requestParameters.pollutant was null or undefined when calling getAirQuality.');
        }

        if (requestParameters.precision === null || requestParameters.precision === undefined) {
            throw new runtime.RequiredError('precision','Required parameter requestParameters.precision was null or undefined when calling getAirQuality.');
        }

        if (requestParameters.boundingBoxCorner1 === null || requestParameters.boundingBoxCorner1 === undefined) {
            throw new runtime.RequiredError('boundingBoxCorner1','Required parameter requestParameters.boundingBoxCorner1 was null or undefined when calling getAirQuality.');
        }

        if (requestParameters.boundingBoxCorner2 === null || requestParameters.boundingBoxCorner2 === undefined) {
            throw new runtime.RequiredError('boundingBoxCorner2','Required parameter requestParameters.boundingBoxCorner2 was null or undefined when calling getAirQuality.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pollutant !== undefined) {
            queryParameters['pollutant'] = requestParameters.pollutant;
        }

        if (requestParameters.precision !== undefined) {
            queryParameters['precision'] = requestParameters.precision;
        }

        if (requestParameters.boundingBoxCorner1 !== undefined) {
            queryParameters['boundingBoxCorner1'] = requestParameters.boundingBoxCorner1;
        }

        if (requestParameters.boundingBoxCorner2 !== undefined) {
            queryParameters['boundingBoxCorner2'] = requestParameters.boundingBoxCorner2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/airQuality`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AirQualityFromJSON));
    }

    /**
     * Get air quality data
     */
    async getAirQuality(requestParameters: GetAirQualityRequest): Promise<Array<AirQuality>> {
        const response = await this.getAirQualityRaw(requestParameters);
        return await response.value();
    }

}
